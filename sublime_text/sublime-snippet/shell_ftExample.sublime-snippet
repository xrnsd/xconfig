<snippet>
	<content><![CDATA[
complete -W "-h --help" ftExample
ftExample()
{
    local ftEffect=函数模板
    local isEnable=false #设为 true 时启用实现 , 设为 def 时将不在说明中显示
    #Debug用
    # trap 'printf "变量跟踪\e[33m %-7s \e[0m \e[31m %-30s \e[0m  \n" [\$LINENO]: example1=\$example1' DEBUG
    # trap 'printf "变量跟踪\e[33m %-7s \e[0m \e[31m %-30s \e[0m  \n" [\$LINENO]: example1=\$example1' ERR

    while true; do case "\$1" in
    --rely) echo -e "\
#===================[   \${ftEffect}   ]的依赖说明=============
#    \${ftEffect}依赖包 \$2
#    请尝试使用 sudo apt-get install \$2 补全依赖
#========================================================="; return ;;
    -h | --help) echo -e "\
#===================[   \${ftEffect}   ]的使用示例==============
#    以下[参数对]无先后顺序可任意组合
#
#    ftExample xxxx
#========================================================="; return ;;
    --env) echo -e "\
#===================[   \${ftEffect}   ]的使用环境说明==============
# 环境未初始化
# 使用前,请先初始化[xxxxxxxxx]
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "\$isEnable" = "false" ]] && ftEcho -s "\${ftEffect} 已被禁用，请确认" && return
    #依赖校验
    [[ -z \$(which exampleTools1) ]] && ftExample --rely "exampleTools1" && return
    #解参验耦
    local valCount=1 errorContent index arg arg2 # arg3 # arg4
    for ((i=1;i<=\$#;i++)) ; do eval arg=\\\${\${i}} ; ((index=i+1)) ; eval arg2=\\\${\${index}}
    #((index=i+2)) ; eval arg3=\\\${\${index}} #; ((index=i+3)) ; eval arg4=\\\${\${index}}
    case "\${arg}" in
        -x ) example1="\${arg2}" #"\${arg2:-"exampleDef1"}" 
          ;;
    * ) [[ -z "\${arg}" ]] && break  ;; esac;done

    (( \$#!=\$valCount )) && errorContent="\${errorContent}\\\n参数默认有\${valCount}个,当前为\$#个" 
    [ -z "\$TTest1" ] && errorContent="\${errorContent}\\\n[示例1]TTest1=\$TTest1"
    [ -n "\$errorContent" ] && ftEcho -ea "函数[\${ftEffect}]的参数错误\${errorContent}\\\n请查看下面说明:" && ftExample -h && return

    #实现主体
}

]]></content>
	<tabTrigger>ftExample</tabTrigger>
	<scope>source.shell</scope>
	<description>xbash 函数模板</description>
</snippet>
<!-- 注意点：
    \\n 改为 \\\n
    $    改为  \$
    \$   改为 \\\$
 -->